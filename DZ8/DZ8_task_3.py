# Напишите функцию segment
# На вход подается два кортежа с координатами точек (x1, y1), (x2, y2)

# В функции происходит проверка на корректность полученных данных.
# С помощью инструкции try/except as отлавливается исключение Exception. И если это исключение поймано,
# то функция возвращает текст исключения задом наперед (Нужно обратится к атрибуту экзепляра класса Exception)
# Если исключения не произошло, то функция возвращает сумму всех координат


# Здесь пишем код
def segment(point1: tuple, point2: tuple):
    """
    Функция принимает на вход два кортежа с координатами точек (x1, y1), (x2, y2).
    В функции происходит проверка на корректность полученных данных:
    1) Если словили исключение Exception - возвращает текст исключения задом наперед.
    2) Если исключения нет (данные корректны) - возвращает сумму координат.
    :param point1: Координаты первой точки (кортеж).
    :param point2: Координаты второй точки (кортеж).
    :return: Сумма координат или текст исключения задом наперед.
    """
    x1, y1 = point1
    x2, y2 = point2
    try:
        return x1 + y1 + x2 + y2
    except Exception as exception:
        return exception.args[0][::-1]
# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [
    ((2, 3), (4, 5)),
    ((2, -3), (4, 5)),
    ((2, 3), ('4', 5)),
    (('a', 3), (4, 5)),
]

test_data = [
    14,
    8,
    "'rts' dna 'tni' :+ rof )s(epyt dnarepo detroppusnu",
    'rts ot )"tni" ton( rts etanetacnoc ylno nac']


for i, d in enumerate(data):
    assert segment(*d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')
